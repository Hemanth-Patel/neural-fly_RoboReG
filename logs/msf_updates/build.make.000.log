[35m[1mScanning dependencies of target msf_updates_gencfg[0m
[35m[1mScanning dependencies of target pose_distorter[0m
[ 10%] [34m[1mGenerating dynamic reconfigure files from cfg/PositionPoseSensor.cfg: /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/PositionPoseSensorConfig.h /home/hemanth/neural_fly/devel/.private/msf_updates/lib/python2.7/dist-packages/msf_updates/cfg/PositionPoseSensorConfig.py[0m
[ 10%] [34m[1mGenerating dynamic reconfigure files from cfg/PosePressureSensor.cfg: /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/PosePressureSensorConfig.h /home/hemanth/neural_fly/devel/.private/msf_updates/lib/python2.7/dist-packages/msf_updates/cfg/PosePressureSensorConfig.py[0m
[ 15%] [32mBuilding CXX object CMakeFiles/pose_distorter.dir/src/msf_distort/PoseDistorter.cc.o[0m
Generating reconfiguration files for PositionPoseSensor in msf_updates
Generating reconfiguration files for PosePressureSensor in msf_updates
Wrote header file in /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/PositionPoseSensorConfig.h
Wrote header file in /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/PosePressureSensorConfig.h
[ 21%] [34m[1mGenerating dynamic reconfigure files from cfg/SinglePoseSensor.cfg: /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/SinglePoseSensorConfig.h /home/hemanth/neural_fly/devel/.private/msf_updates/lib/python2.7/dist-packages/msf_updates/cfg/SinglePoseSensorConfig.py[0m
[ 26%] [34m[1mGenerating dynamic reconfigure files from cfg/SinglePositionSensor.cfg: /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/SinglePositionSensorConfig.h /home/hemanth/neural_fly/devel/.private/msf_updates/lib/python2.7/dist-packages/msf_updates/cfg/SinglePositionSensorConfig.py[0m
Generating reconfiguration files for SinglePositionSensor in msf_updates
Wrote header file in /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/SinglePositionSensorConfig.h
[ 31%] [34m[1mGenerating dynamic reconfigure files from cfg/SphericalPositionSensor.cfg: /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/SphericalPositionSensorConfig.h /home/hemanth/neural_fly/devel/.private/msf_updates/lib/python2.7/dist-packages/msf_updates/cfg/SphericalPositionSensorConfig.py[0m
Generating reconfiguration files for SinglePoseSensor in msf_updates
Wrote header file in /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/SinglePoseSensorConfig.h
Generating reconfiguration files for SphericalPositionSensor in msf_updates
Wrote header file in /home/hemanth/neural_fly/devel/.private/msf_updates/include/msf_updates/SphericalPositionSensorConfig.h
[ 31%] Built target msf_updates_gencfg
[35m[1mScanning dependencies of target spherical_position_sensor[0m
[ 36%] [32mBuilding CXX object src/spherical_msf/CMakeFiles/spherical_position_sensor.dir/main.cpp.o[0m
[ 42%] [32m[1mLinking CXX shared library /home/hemanth/neural_fly/devel/.private/msf_updates/lib/libpose_distorter.so[0m
[ 42%] Built target pose_distorter
[35m[1mScanning dependencies of target pose_sensor[0m
[35m[1mScanning dependencies of target test_distort[0m
[ 47%] [32mBuilding CXX object CMakeFiles/test_distort.dir/src/test/test_distort.cc.o[0m
[ 52%] [32mBuilding CXX object src/pose_msf/CMakeFiles/pose_sensor.dir/main.cpp.o[0m
[ 57%] [32m[1mLinking CXX executable /home/hemanth/neural_fly/devel/.private/msf_updates/lib/msf_updates/test_distort[0m
[ 57%] Built target test_distort
[35m[1mScanning dependencies of target pose_pressure_sensor[0m
[ 63%] [32mBuilding CXX object src/pose_pressure_msf/CMakeFiles/pose_pressure_sensor.dir/main.cpp.o[0m
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/spherical_msf/./spherical_sensormanager.h:22,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/spherical_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h: In instantiation of â€˜msf_core::MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool, int, bool, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 5> >, msf_updates::StateDefinition>]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:130:54:   required from â€˜msf_core::MSF_Measurement<T, RMAT_T, EKFState_T>::MSF_Measurement(bool, int, bool, double) [with T = geometry_msgs::PointStamped_<std::allocator<void> >; RMAT_T = Eigen::Matrix<double, 2, 2>; EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 5> >, msf_updates::StateDefinition>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/spherical_position_sensor/spherical_measurement.h:91:33:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:80:10: warning: â€˜msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 5> >, msf_updates::StateDefinition> >::mah_threshold_â€™ will be initialized after [-Wreorder]
   double mah_threshold_;
          ^~~~~~~~~~~~~~
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:49:10: warning:   â€˜double msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 5> >, msf_updates::StateDefinition> >::timeâ€™ [-Wreorder]
   double time;  ///< The time_ this measurement was taken.
          ^~~~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:249:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/spherical_msf/./spherical_sensormanager.h:22,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/spherical_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h:23:1: warning:   when initialized here [-Wreorder]
 MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool isabsoluteMeasurement,
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[ 68%] [32m[1mLinking CXX executable /home/hemanth/neural_fly/devel/.private/msf_updates/lib/msf_updates/spherical_position_sensor[0m
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/pose_sensorhandler.h:86:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/pose_sensormanager.h:26,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/main.cpp:19:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp: In constructor â€˜msf_pose_sensor::PoseSensorHandler<MEASUREMENT_TYPE, MANAGER_TYPE>::PoseSensorHandler(MANAGER_TYPE&, std::__cxx11::string, std::__cxx11::string, bool)â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: warning: â€˜newâ€™ of type â€˜msf_updates::PoseDistorterâ€™ with extended alignment 32 [-Waligned-new=]
                                        distortscale_mean, distortscale_stddev));
                                                                              ^
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: note: uses â€˜void* operator new(std::size_t)â€™, which does not have an alignment parameter
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: note: use â€˜-faligned-newâ€™ to enable C++17 over-aligned new support
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp: In instantiation of â€˜msf_pose_sensor::PoseSensorHandler<MEASUREMENT_TYPE, MANAGER_TYPE>::PoseSensorHandler(MANAGER_TYPE&, std::__cxx11::string, std::__cxx11::string, bool) [with MEASUREMENT_TYPE = msf_updates::pose_measurement::PoseMeasurement<>; MANAGER_TYPE = msf_pose_sensor::PoseSensorManager; std::__cxx11::string = std::__cxx11::basic_string<char>]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/pose_sensormanager.h:57:70:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: warning: â€˜newâ€™ of type â€˜msf_updates::PoseDistorterâ€™ with extended alignment 32 [-Waligned-new=]
         new msf_updates::PoseDistorter(meanpos, stddevpos, meanatt, stddevatt,
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        distortscale_mean, distortscale_stddev));
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: note: uses â€˜void* operator new(std::size_t)â€™, which does not have an alignment parameter
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: note: use â€˜-faligned-newâ€™ to enable C++17 over-aligned new support
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/pose_sensormanager.h:22,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/main.cpp:19:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h: In instantiation of â€˜msf_core::MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool, int, bool, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition>]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:174:80:   required from â€˜msf_core::MSF_InitMeasurement<EKFState_T>::MSF_InitMeasurement(bool) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/pose_sensormanager.h:213:66:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:80:10: warning: â€˜msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition> >::mah_threshold_â€™ will be initialized after [-Wreorder]
   double mah_threshold_;
          ^~~~~~~~~~~~~~
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:49:10: warning:   â€˜double msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition> >::timeâ€™ [-Wreorder]
   double time;  ///< The time_ this measurement was taken.
          ^~~~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:249:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/pose_sensormanager.h:22,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/main.cpp:19:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h:23:1: warning:   when initialized here [-Wreorder]
 MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool isabsoluteMeasurement,
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sortedContainer.h:21:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:41,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/pose_sensormanager.h:22,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/main.cpp:19:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_tools.h: In instantiation of â€˜typename Eigen::MatrixBase<Derived>::Scalar msf_core::GetMedian(const Eigen::MatrixBase<Derived>&) [with D = Eigen::Block<Eigen::Matrix<double, 30, 4, 0, 30, 4>, 30, 1, false>; typename Eigen::MatrixBase<Derived>::Scalar = double]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_checkFuzzyTracking.h:84:20:   required from â€˜bool msf_core::CheckFuzzyTracking<EKFState_T, NONTEMPORALDRIFTINGTYPE>::Check(boost::shared_ptr<X>, EKFState_T&, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition>; NONTEMPORALDRIFTINGTYPE = msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>&]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:902:17:   required from â€˜bool msf_core::MSF_Core<EKFState_T>::ApplyCorrection(boost::shared_ptr<X>&, msf_core::MSF_Core<EKFState_T>::ErrorState&, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition>; msf_core::MSF_Core<EKFState_T>::ErrorState = Eigen::Matrix<double, 28, 1, 0, 28, 1>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h:79:3:   required from â€˜void msf_core::MSF_MeasurementBase<EKFState_T>::CalculateAndApplyCorrection(boost::shared_ptr<X>, msf_core::MSF_Core<EKFState_T>&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with H_type = Eigen::Matrix<double, 7, 28>; Res_type = Eigen::Matrix<double, 7, 1>; R_type = Eigen::Matrix<double, 7, 7>; EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/pose_measurement.h:340:40:   required from â€˜void msf_updates::pose_measurement::PoseMeasurement<StateLIdx, StateQicIdx, StatePicIdx, StateQwvIdx, StatePwvIdx>::Apply(boost::shared_ptr<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition> >, msf_core::MSF_Core<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5, 2>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9> >, msf_updates::StateDefinition> >&) [with int StateLIdx = 5; int StateQicIdx = 8; int StatePicIdx = 9; int StateQwvIdx = 6; int StatePwvIdx = 7]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_msf/main.cpp:29:1:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_tools.h:38:3: warning: enum constant in boolean context [-Wint-in-bool-context]
   if (Eigen::MatrixBase<D>::SizeAtCompileTime) {
   ^~
[ 73%] [32m[1mLinking CXX executable /home/hemanth/neural_fly/devel/.private/msf_updates/lib/msf_updates/pose_sensor[0m
[ 73%] Built target spherical_position_sensor
[ 73%] Built target pose_sensor
[35m[1mScanning dependencies of target position_pose_sensor[0m
[35m[1mScanning dependencies of target position_sensor[0m
[ 78%] [32mBuilding CXX object src/position_msf/CMakeFiles/position_sensor.dir/main.cpp.o[0m
[ 84%] [32mBuilding CXX object src/position_pose_msf/CMakeFiles/position_pose_sensor.dir/main.cpp.o[0m
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/pose_sensorhandler.h:86:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/pose_pressure_sensormanager.h:25,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp: In constructor â€˜msf_pose_sensor::PoseSensorHandler<MEASUREMENT_TYPE, MANAGER_TYPE>::PoseSensorHandler(MANAGER_TYPE&, std::__cxx11::string, std::__cxx11::string, bool)â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: warning: â€˜newâ€™ of type â€˜msf_updates::PoseDistorterâ€™ with extended alignment 32 [-Waligned-new=]
                                        distortscale_mean, distortscale_stddev));
                                                                              ^
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: note: uses â€˜void* operator new(std::size_t)â€™, which does not have an alignment parameter
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: note: use â€˜-faligned-newâ€™ to enable C++17 over-aligned new support
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp: In instantiation of â€˜msf_pose_sensor::PoseSensorHandler<MEASUREMENT_TYPE, MANAGER_TYPE>::PoseSensorHandler(MANAGER_TYPE&, std::__cxx11::string, std::__cxx11::string, bool) [with MEASUREMENT_TYPE = msf_updates::pose_measurement::PoseMeasurement<>; MANAGER_TYPE = msf_pose_pressure_sensor::PosePressureSensorManager; std::__cxx11::string = std::__cxx11::basic_string<char>]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/pose_pressure_sensormanager.h:55:77:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: warning: â€˜newâ€™ of type â€˜msf_updates::PoseDistorterâ€™ with extended alignment 32 [-Waligned-new=]
         new msf_updates::PoseDistorter(meanpos, stddevpos, meanatt, stddevatt,
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        distortscale_mean, distortscale_stddev));
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: note: uses â€˜void* operator new(std::size_t)â€™, which does not have an alignment parameter
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: note: use â€˜-faligned-newâ€™ to enable C++17 over-aligned new support
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_sensormanager_inl.h:21,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sensormanager.h:149,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sensormanagerROS.h:35,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/pose_pressure_sensormanager.h:21,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h: In instantiation of â€˜msf_core::MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool, int, bool, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 10> >, msf_updates::StateDefinition>]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:130:54:   required from â€˜msf_core::MSF_Measurement<T, RMAT_T, EKFState_T>::MSF_Measurement(bool, int, bool, double) [with T = geometry_msgs::PointStamped_<std::allocator<void> >; RMAT_T = Eigen::Matrix<double, 1, 1>; EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 10> >, msf_updates::StateDefinition>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pressure_sensor_handler/pressure_measurement.h:66:19:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:80:10: warning: â€˜msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 10> >, msf_updates::StateDefinition> >::mah_threshold_â€™ will be initialized after [-Wreorder]
   double mah_threshold_;
          ^~~~~~~~~~~~~~
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:49:10: warning:   â€˜double msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 10> >, msf_updates::StateDefinition> >::timeâ€™ [-Wreorder]
   double time;  ///< The time_ this measurement was taken.
          ^~~~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:249:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_sensormanager_inl.h:21,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sensormanager.h:149,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sensormanagerROS.h:35,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/pose_pressure_sensormanager.h:21,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h:23:1: warning:   when initialized here [-Wreorder]
 MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool isabsoluteMeasurement,
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sortedContainer.h:21:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:41,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_sensormanager_inl.h:21,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sensormanager.h:149,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sensormanagerROS.h:35,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/pose_pressure_sensormanager.h:21,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/pose_pressure_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_tools.h: In instantiation of â€˜typename Eigen::MatrixBase<Derived>::Scalar msf_core::GetMedian(const Eigen::MatrixBase<Derived>&) [with D = Eigen::Block<Eigen::Matrix<double, 30, 4, 0, 30, 4>, 30, 1, false>; typename Eigen::MatrixBase<Derived>::Scalar = double]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_checkFuzzyTracking.h:84:20:   required from â€˜bool msf_core::CheckFuzzyTracking<EKFState_T, NONTEMPORALDRIFTINGTYPE>::Check(boost::shared_ptr<X>, EKFState_T&, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 10> >, msf_updates::StateDefinition>; NONTEMPORALDRIFTINGTYPE = msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>&]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:902:17:   required from â€˜bool msf_core::MSF_Core<EKFState_T>::ApplyCorrection(boost::shared_ptr<X>&, msf_core::MSF_Core<EKFState_T>::ErrorState&, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 10> >, msf_updates::StateDefinition>; msf_core::MSF_Core<EKFState_T>::ErrorState = Eigen::Matrix<double, 29, 1, 0, 29, 1>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h:79:3:   required from â€˜void msf_core::MSF_MeasurementBase<EKFState_T>::CalculateAndApplyCorrection(boost::shared_ptr<X>, msf_core::MSF_Core<EKFState_T>&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with H_type = Eigen::Matrix<double, 1, 29>; Res_type = Eigen::Matrix<double, 1, 1>; R_type = Eigen::Matrix<double, 1, 1>; EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 10> >, msf_updates::StateDefinition>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pressure_sensor_handler/pressure_measurement.h:113:78:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_tools.h:38:3: warning: enum constant in boolean context [-Wint-in-bool-context]
   if (Eigen::MatrixBase<D>::SizeAtCompileTime) {
   ^~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/pose_sensorhandler.h:86:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/position_pose_sensormanager.h:26,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp: In constructor â€˜msf_pose_sensor::PoseSensorHandler<MEASUREMENT_TYPE, MANAGER_TYPE>::PoseSensorHandler(MANAGER_TYPE&, std::__cxx11::string, std::__cxx11::string, bool)â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: warning: â€˜newâ€™ of type â€˜msf_updates::PoseDistorterâ€™ with extended alignment 32 [-Waligned-new=]
                                        distortscale_mean, distortscale_stddev));
                                                                              ^
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: note: uses â€˜void* operator new(std::size_t)â€™, which does not have an alignment parameter
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:126:78: note: use â€˜-faligned-newâ€™ to enable C++17 over-aligned new support
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp: In instantiation of â€˜msf_pose_sensor::PoseSensorHandler<MEASUREMENT_TYPE, MANAGER_TYPE>::PoseSensorHandler(MANAGER_TYPE&, std::__cxx11::string, std::__cxx11::string, bool) [with MEASUREMENT_TYPE = msf_updates::pose_measurement::PoseMeasurement<>; MANAGER_TYPE = msf_updates::PositionPoseSensorManager; std::__cxx11::string = std::__cxx11::basic_string<char>]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/position_pose_sensormanager.h:63:70:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: warning: â€˜newâ€™ of type â€˜msf_updates::PoseDistorterâ€™ with extended alignment 32 [-Waligned-new=]
         new msf_updates::PoseDistorter(meanpos, stddevpos, meanatt, stddevatt,
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        distortscale_mean, distortscale_stddev));
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: note: uses â€˜void* operator new(std::size_t)â€™, which does not have an alignment parameter
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/pose_sensor_handler/implementation/pose_sensorhandler.hpp:125:9: note: use â€˜-faligned-newâ€™ to enable C++17 over-aligned new support
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/position_pose_sensormanager.h:22,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h: In instantiation of â€˜msf_core::MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool, int, bool, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 10> >, msf_updates::StateDefinition>]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:130:54:   required from â€˜msf_core::MSF_Measurement<T, RMAT_T, EKFState_T>::MSF_Measurement(bool, int, bool, double) [with T = sensor_fusion_comm::PointWithCovarianceStamped_<std::allocator<void> >; RMAT_T = Eigen::Matrix<double, 3, 3>; EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 10> >, msf_updates::StateDefinition>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/position_sensor_handler/position_measurement.h:95:33:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:80:10: warning: â€˜msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 10> >, msf_updates::StateDefinition> >::mah_threshold_â€™ will be initialized after [-Wreorder]
   double mah_threshold_;
          ^~~~~~~~~~~~~~
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:49:10: warning:   â€˜double msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 10> >, msf_updates::StateDefinition> >::timeâ€™ [-Wreorder]
   double time;  ///< The time_ this measurement was taken.
          ^~~~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:249:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/position_pose_sensormanager.h:22,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h:23:1: warning:   when initialized here [-Wreorder]
 MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool isabsoluteMeasurement,
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_sortedContainer.h:21:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:41,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/position_pose_sensormanager.h:22,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_pose_msf/main.cpp:17:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_tools.h: In instantiation of â€˜typename Eigen::MatrixBase<Derived>::Scalar msf_core::GetMedian(const Eigen::MatrixBase<Derived>&) [with D = Eigen::Block<Eigen::Matrix<double, 30, 4, 0, 30, 4>, 30, 1, false>; typename Eigen::MatrixBase<Derived>::Scalar = double]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_checkFuzzyTracking.h:84:20:   required from â€˜bool msf_core::CheckFuzzyTracking<EKFState_T, NONTEMPORALDRIFTINGTYPE>::Check(boost::shared_ptr<X>, EKFState_T&, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 10> >, msf_updates::StateDefinition>; NONTEMPORALDRIFTINGTYPE = msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>&]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:902:17:   required from â€˜bool msf_core::MSF_Core<EKFState_T>::ApplyCorrection(boost::shared_ptr<X>&, msf_core::MSF_Core<EKFState_T>::ErrorState&, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 10> >, msf_updates::StateDefinition>; msf_core::MSF_Core<EKFState_T>::ErrorState = Eigen::Matrix<double, 31, 1, 0, 31, 1>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h:79:3:   required from â€˜void msf_core::MSF_MeasurementBase<EKFState_T>::CalculateAndApplyCorrection(boost::shared_ptr<X>, msf_core::MSF_Core<EKFState_T>&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with H_type = Eigen::Matrix<double, 3, 31>; Res_type = Eigen::Matrix<double, 3, 1>; R_type = Eigen::Matrix<double, 3, 3>; EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 1, 1>, 5>, msf_core::StateVar_T<Eigen::Quaternion<double>, 6, 3>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 7>, msf_core::StateVar_T<Eigen::Quaternion<double>, 8>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 9>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 10> >, msf_updates::StateDefinition>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/position_sensor_handler/position_measurement.h:192:43:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_tools.h:38:3: warning: enum constant in boolean context [-Wint-in-bool-context]
   if (Eigen::MatrixBase<D>::SizeAtCompileTime) {
   ^~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_msf/position_sensormanager.h:24,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_msf/main.cpp:19:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h: In instantiation of â€˜msf_core::MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool, int, bool, double) [with EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 5> >, msf_updates::StateDefinition>]â€™:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:130:54:   required from â€˜msf_core::MSF_Measurement<T, RMAT_T, EKFState_T>::MSF_Measurement(bool, int, bool, double) [with T = sensor_fusion_comm::PointWithCovarianceStamped_<std::allocator<void> >; RMAT_T = Eigen::Matrix<double, 3, 3>; EKFState_T = msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 5> >, msf_updates::StateDefinition>]â€™
/home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/include/msf_updates/position_sensor_handler/position_measurement.h:95:33:   required from here
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:80:10: warning: â€˜msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 5> >, msf_updates::StateDefinition> >::mah_threshold_â€™ will be initialized after [-Wreorder]
   double mah_threshold_;
          ^~~~~~~~~~~~~~
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:49:10: warning:   â€˜double msf_core::MSF_MeasurementBase<msf_core::GenericState_T<boost::fusion::vector<msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 0, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 1, 0>, msf_core::StateVar_T<Eigen::Quaternion<double>, 2, 0>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 3, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 4, 1>, msf_core::StateVar_T<Eigen::Matrix<double, 3, 1>, 5> >, msf_updates::StateDefinition> >::timeâ€™ [-Wreorder]
   double time;  ///< The time_ this measurement was taken.
          ^~~~
In file included from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_measurement.h:249:0,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_core_inl.h:34,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/msf_core.h:259,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_msf/position_sensormanager.h:24,
                 from /home/hemanth/neural_fly/src/ethzasl_msf/msf_updates/src/position_msf/main.cpp:19:
/home/hemanth/neural_fly/src/ethzasl_msf/msf_core/include/msf_core/implementation/msf_measurement_inl.h:23:1: warning:   when initialized here [-Wreorder]
 MSF_MeasurementBase<EKFState_T>::MSF_MeasurementBase(bool isabsoluteMeasurement,
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[100%] [32m[1mLinking CXX executable /home/hemanth/neural_fly/devel/.private/msf_updates/lib/msf_updates/position_sensor[0m
[100%] [32m[1mLinking CXX executable /home/hemanth/neural_fly/devel/.private/msf_updates/lib/msf_updates/position_pose_sensor[0m
[100%] [32m[1mLinking CXX executable /home/hemanth/neural_fly/devel/.private/msf_updates/lib/msf_updates/pose_pressure_sensor[0m
[100%] Built target position_sensor
[100%] Built target pose_pressure_sensor
[100%] Built target position_pose_sensor
